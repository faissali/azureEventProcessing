# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e476a89e-0ef6-4546-8634-dbfdb2fe1bbc'

  # Function app name
  functionAppName: 'fbu-function-processing'

  # resource group name
  resourceGroupName: 'fbu-apps'

  # terraform storage name
  terraformStorageName: 'terraformstoragefbu'

   # terraform container name
  terraformContainerName : 'terraform'

  # terraform key
  terraformKey : 'terraform.tfstate'

  # Agent VM image name
  vmImageName: 'windows-2019'
  
  # location
  location: 'westeurope'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build

  jobs:
  - job: Build
    displayName: Build & Publish
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - task: CopyFiles@2
      displayName: 'Copy Terraform files'
      inputs:
        SourceFolder: 'Deploy'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Deploy'
    
    - publish: '$(Build.ArtifactStagingDirectory)/'
      artifact: drop



- stage: Deploy
  displayName: Deploy Dev
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job: TerraformInstall
    steps:
    - task: AzureCLI@2
      displayName: Install Terraform Backend
      inputs:
        azureSubscription: 'Free Trial (14451a32-9abf-47f3-ab11-e00284963712)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --location $(location) --name "$(resourceGroupName)"       
          az storage account create --name "$(terraformStorageName)" --resource-group "$(resourceGroupName)" --location "$(location)" --sku "Standard_LRS"          
          az storage container create --name "$(terraformContainerName)" --account-name "$(terraformStorageName)"
    - task: TerraformInstaller@1
      displayName: Install Terraform
      inputs:
        terraformVersion: 'latest'

    
    
      
    
          