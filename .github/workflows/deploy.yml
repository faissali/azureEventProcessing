name: Deploy event processing architecture

on:
  workflow_dispatch: # manuel https://docs.github.com/en/actions/using-workflows/triggering-a-workflow

env:
  # set this to the path to your web app project, defaults to the repository root
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'    
  # Function app name
  FUNCTION_APP_NAME: fbu-function-processing
  # resource group name
  RESOURCE_GROUP_NAME: fbu-apps
  # terraform storage name
  TERRAFORM_STORAGE_NAME: terraformstoragefbu
  # terraform container name
  TERRAFORM_CONTAINER_NAME: terraform
  # terraform key
  TERRAFORM_KEY: terraform.tfstate
  # location
  LOCATION: westeurope

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Find and Replace RESOURCE_GROUP_NAME in deploy files
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "$RESOURCE_GROUP_NAME"
        replace: "${{ env.RESOURCE_GROUP_NAME }}"
        include: "Deploy/1-versions.tf"
        regex: false
    
    - name: Find and Replace TERRAFORM_STORAGE_NAME in deploy files
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "$TERRAFORM_STORAGE_NAME"
        replace: "${{ env.TERRAFORM_STORAGE_NAME }}"
        include: "Deploy/1-versions.tf"
        regex: false
    
    - name: Find and Replace TERRAFORM_CONTAINER_NAME in deploy files
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "$TERRAFORM_CONTAINER_NAME"
        replace: "${{ env.TERRAFORM_CONTAINER_NAME }}"
        include: "Deploy/1-versions.tf"
        regex: false
        
    - name: Find and Replace TERRAFORM_KEY in deploy files
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "$TERRAFORM_KEY"
        replace: "${{ env.TERRAFORM_KEY }}"
        include: "Deploy/1-versions.tf"
        regex: false
        
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal
      
    - name: Publish
      run: dotnet publish ./EventProcessingFunction.csproj -c Release -o ./output
    
    - name: Test replace
      run: cat ./Deploy/1-versions.tf
      
    - name: Upload the build artifact
      uses: actions/upload-artifact@v3
      with:
        name: EventProcessingFunction
        path: |
         ./output/**
         ./Deploy/**
        if-no-files-found: error
        
  deploy:
  
    runs-on: ubuntu-latest
    needs: build
    steps:
    
    - name: Download the build artifact
      uses: actions/download-artifact@v3
      with:
        name: EventProcessingFunction
        path: ./
    
    - name: ls
      run: ls
   
    - name: pwd
      run: pwd
      
    - name: Azure login
      uses: azure/login@v1.4.6
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create resource group
      run: az group create --location ${{ env.LOCATION }} --name "${{ env.RESOURCE_GROUP_NAME }}"

    - name: Create storage account for terraform backend
      run: az storage account create --name "${{ env.TERRAFORM_STORAGE_NAME }}" --resource-group "${{ env.RESOURCE_GROUP_NAME }}" --location "${{ env.LOCATION }}" --sku "Standard_LRS"

    - name: Create storage container for terraform backend
      run: az storage container create --name "${{ env.TERRAFORM_CONTAINER_NAME }}" --account-name "${{ env.TERRAFORM_STORAGE_NAME }}"
        
    # Install the needed version of Terraform cli
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.9
    
    - name: Terraform Init
      run: terraform init
      shell: bash
      
    # https://www.terraform.io/cli/commands/validate
    - name: Terraform Validate
      working-directory: ./Deploy
      run: |
        terraform validate
    # Generates an execution plan for Terraform with tfplan file https://www.terraform.io/cli/commands/plan
    - name: Terraform Plan
      working-directory: ./Deploy
      run: |
        terraform plan -lock=false -out=monplan.tfplan
              
    # apply a execution plan https://www.terraform.io/cli/commands/apply      
    - name: Terraform Apply
      working-directory: ./Deploy
      run: |
        terraform apply -auto-approve -lock=false "monplan.tfplan"
